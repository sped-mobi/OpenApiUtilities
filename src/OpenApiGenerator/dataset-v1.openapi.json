{
  "openapi": "3.0.1",
  "info": {
    "title": "Data Set API",
    "description": "Open Api 3.0 Specification for Online Data Sets",
    "termsOfService": "http://sped.mobi/terms.html",
    "contact": {
      "name": "Brad R. Marshall",
      "url": "http://sped.mobi",
      "email": "bmarshall@sped.mobi"
    },
    "license": {
      "name": "MIT License",
      "url": "http://sped.mobi/license.html"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "{scheme}://datasetws.com/{basePath}",
      "description": "Amazon Api Gateway Production Server",
      "variables": {
        "scheme": {
          "default": "http",
          "description": "The Data Set API is accessible via https and http.",
          "enum": [
            "http",
            "https"
          ]
        },
        "basePath": {
          "default": "api/v1",
          "description": "Represents the base path for the api."
        }
      }
    }
  ],
  "paths": {
    "/dataset": {
      "get": {
        "summary": "The REST read request message for the GetAllDataSets() API call.",
        "description": "This is a request to the Service Provider to provide all of the DataSets objects in the database.",
        "operationId": "GetAllDataSets",
        "responses": {
          "200": {
            "description": "This is the response when the request has been completed successfully. It is the DataSets from the service provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSets"
                }
              }
            }
          },
          "400": {
            "description": "An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was not correctly authorised i.e. 'unauthorisedrequest'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "403": {
            "description": "This is used to indicate that the server can be reached and process the request but refuses to take any further action i.e. 'forbidden'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "404": {
            "description": "Either the supplied id is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' of 'Invalid GUID' should also be presented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "429": {
            "description": "The server is receiving too many requests i.e. 'server_busy'. Retry at a later time. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "This code should be used only if there is catastrophic error and there is not a more appropriate code i.e. 'internal_server_error'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          }
        }
      }
    },
    "/dataset/{uuid}": {
      "get": {
        "tags": [
          "DataSetsManager"
        ],
        "summary": "The REST read request message for the GetDataSet() API call.",
        "description": "This is a request to the Service Provider to provide the specified DataSet.",
        "operationId": "GetDataSet",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Universally unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "This is the response when the request has been completed successfully. It is the DataSet from the service provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSet"
                }
              }
            }
          },
          "400": {
            "description": "An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was not correctly authorised i.e. 'unauthorisedrequest'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "403": {
            "description": "This is used to indicate that the server can be reached and process the request but refuses to take any further action i.e. 'forbidden'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "404": {
            "description": "Either the supplied id is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' of 'Invalid GUID' should also be presented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "429": {
            "description": "The server is receiving too many requests i.e. 'server_busy'. Retry at a later time. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "This code should be used only if there is catastrophic error and there is not a more appropriate code i.e. 'internal_server_error'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSetsManager"
        ],
        "summary": "The REST add request message for the PostDataSet() API call.",
        "description": "This is a request to the Service Provider to add the specified DataSet to the database.",
        "operationId": "PostDataSet",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Universally unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "This is the response when the request has been completed successfully. It is the DataSet from the service provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSet"
                }
              }
            }
          },
          "400": {
            "description": "An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was not correctly authorised i.e. 'unauthorisedrequest'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "403": {
            "description": "This is used to indicate that the server can be reached and process the request but refuses to take any further action i.e. 'forbidden'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "404": {
            "description": "Either the supplied id is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' of 'Invalid GUID' should also be presented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "429": {
            "description": "The server is receiving too many requests i.e. 'server_busy'. Retry at a later time. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "This code should be used only if there is catastrophic error and there is not a more appropriate code i.e. 'internal_server_error'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataSetsManager"
        ],
        "summary": "The REST drop request message for the DeleteDataSet() APIcall.",
        "description": "This is a request to the Service Provider to delete the specified DataSet from the database.",
        "operationId": "DeleteDataSet",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Universally unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "This is the response when the request has been completed successfully. It is the DataSet from the service provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSet"
                }
              }
            }
          },
          "400": {
            "description": "An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was not correctly authorised i.e. 'unauthorisedrequest'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "403": {
            "description": "This is used to indicate that the server can be reached and process the request but refuses to take any further action i.e. 'forbidden'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "404": {
            "description": "Either the supplied id is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' of 'Invalid GUID' should also be presented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "429": {
            "description": "The server is receiving too many requests i.e. 'server_busy'. Retry at a later time. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "This code should be used only if there is catastrophic error and there is not a more appropriate code i.e. 'internal_server_error'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataSetsManager"
        ],
        "summary": "The RESTupdate request message for the PatchDataSet() APIcall.",
        "description": "This is a request to the Service Provider to update the specified DataSet in the database.",
        "operationId": "PatchDataSet",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Universally unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "This is the response when the request has been completed successfully. It is the DataSet from the service provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSet"
                }
              }
            }
          },
          "400": {
            "description": "An invalid selection field was supplied and data filtering on the selection criteria was not possible i.e. 'invalid_selection_field'. This is accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "401": {
            "description": "The request was not correctly authorised i.e. 'unauthorisedrequest'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "403": {
            "description": "This is used to indicate that the server can be reached and process the request but refuses to take any further action i.e. 'forbidden'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "404": {
            "description": "Either the supplied id is unknown in the Service Provider and so the object could not be changed or an invalid GUID has been supplied. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'. The statement 'Unknown Object' of 'Invalid GUID' should also be presented.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "429": {
            "description": "The server is receiving too many requests i.e. 'server_busy'. Retry at a later time. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          },
          "500": {
            "description": "This code should be used only if there is catastrophic error and there is not a more appropriate code i.e. 'internal_server_error'. This would be accompanied by the 'codeMajor/severity' values of 'failure/error'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusInfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UUID": {
        "type": "string",
        "description": "The data-type for establishing a Globally Unique Identifier (GUID). The form of the GUID is a Universally Unique Identifier (UUID) of 16 hexadecimal characters (lower case) in the format 8-4-4-4-12. All permitted versions (1-5) and variants (1-2) are supported.",
        "format": "uuid"
      },
      "DataSet": {
        "type": "object",
        "properties": {
          "iconLink": {
            "$ref": "#/components/schemas/URL"
          },
          "attribution": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "attributionLink": {
            "$ref": "#/components/schemas/URL"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "The container for a data set."
      },
      "DataSets": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "sets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSet"
            }
          }
        },
        "description": "The container for a collection of data sets."
      },
      "ErrorStatusInfo": {
        "required": [
          "codeMajor",
          "severity"
        ],
        "type": "object",
        "properties": {
          "severity": {
            "enum": [
              "status",
              "warning",
              "error"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "codeMajor": {
            "enum": [
              "success",
              "processing",
              "failure",
              "unsupported"
            ],
            "type": "string"
          },
          "codeMinor": {
            "$ref": "#/components/schemas/ErrorCodeMinor"
          }
        },
        "description": "This is the container for the status code and associated information returned within the HTTP messages received from the Service Provider. For the CASE service this object will only be returned to provide information about a failed request i.e. it will NOT be in the payload for a successful request. See Appendix B for further information on the interpretation of the information contained within this class."
      },
      "URL": {
        "type": "string",
        "description": "The data-type for establishing a Uniform Resource Locator (URL) as defined by W3C.",
        "format": "uri"
      },
      "ErrorCodeMinorField": {
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "value": {
            "enum": [
              "fullsuccess",
              "invalid_sort_field",
              "invalid_selection_field",
              "forbidden",
              "unauthorisedrequest",
              "internal_server_error",
              "unknownobject",
              "server_busy",
              "invaliduuid"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "This is the container for a single code minor status code."
      },
      "ErrorCodeMinor": {
        "required": [
          "codes"
        ],
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorCodeMinorField"
            }
          }
        },
        "description": "This is the container for the set of code minor status codes reported in the responses from the Service Provider."
      }
    }
  },
  "tags": [
    {
      "name": "DataSetsManager",
      "description": "The set of service operations that manage access to data sets. This interface manages data set descriptions only (i.e., it does not support management of tables, columns, etc.)."
    }
  ]
}